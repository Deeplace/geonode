<?php

/**
 * Implementation of hook_init().
 */
function geonode_init() {
  // Use the administrative theme if the user is looking at a page in the admin/* path.
  if (variable_get('node_admin_theme', '0') && arg(0) == 'node' && arg(2) == 'geo') {
    global $custom_theme;
    $custom_theme = variable_get('admin_theme', '0');
    drupal_add_css(drupal_get_path('module', 'system') . '/system.admin.css', 'module');
  }
}

/**
 * Implementation of hook_permission().
 */
function geonode_permission() {
  return array(
    'administer node geo location'=> array(
      'title' => t('Administer geo location nodes')),
     'administer node geo location settings'=> array(
      'title' => t('Administer geo location node settings'))
  );
}

/**
 * Determine whether the current user may perform the geo location on the
 * specified node.
 */
function geonode_access($node) {
  $types = explode('|', variable_get('geonode_node_types', 'page'));
  if (!in_array($node->type, $types)) return false;
  if (!user_access('administer node geo location')) return false;
  return true;
}

/**
 * Implementation of hook_menu().
 */
function geonode_menu() {
  $items = array();

  $items['node/%node/geo'] = array(
    'title' => 'Geo location',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geonode_form', 1),
    'access callback' => 'geonode_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/settings/geonode'] = array(
    'title' => 'Node geo location',
    'description' => 'Configure node geo location settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geonode_admin_settings'),
    'access arguments' => array('administer node geo location settings'),
    'file' => 'geonode.admin.inc',
  );

  $items['admin/settings/geonode/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/settings/geonode/plugin'] = array(
    'title' => 'Plugin configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geonode_admin_plugin_settings'),
    'access arguments' => array('administer node geo location settings'),
    'file' => 'geonode.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_node_load()
 */
function geonode_node_load($nodes, $types) {
  foreach ($nodes as &$node) {
    $geo_types = explode('|', variable_get('geonode_node_types', 'page'));
    if (!in_array($node->type, $geo_types)) {
      continue;
    }
    $query = db_select('node_location', 'nl');
    $query->fields('nl', array('lat', 'lon'));
    $query->condition('nl.nid', $node->nid);
    $location = $query->execute()->fetch();
    if ($location) {
      $node->lat = $location->lat;
      $node->lon = $location->lon;
    }
    else {
      $node->lat = '47.031768087892';
      $node->lon = '28.848643898973';
    }
  }
}

/**
 * Implementation of hook_node_delete()
 */
function geonode_node_delete($node) {
 db_delete('node_location')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Menu callback: administer node geo location form
 */
function geonode_form($form, &$form_state, $node) {
  $form = array();

  $types = explode('|', variable_get('geonode_node_types', 'page'));
  if (!in_array($node->type, $types)) {
    $form['error'] = array('#value' => t('The node of !type-type cannot be located on the map. Please visit this <a href="!url">page</a> and check settings.', array('!type' => $node->type, '!url' => url('admin/settings/geonode'))));
    return $form;
  }

  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );

  if (!isset($node->lat) && !isset($node->lon)) {
    $nodes = array($node);
    $types = array($type->type);
    geonode_node_load($nodes, $types);
  }
  $plugin = variable_get('geonode_plugin', '');
  $map = module_invoke("geonode_{$plugin}", 'geonode_plugin', 'location', $node->lat, $node->lon);

  $form['map'] = array(
    '#markup' => $map
  );

  $form['lat'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->lat
  );

  $form['lon'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->lon
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Implementation of hook_submit().
 */
function geonode_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  $query = db_select('node_location', 'nl');
  $query->fields('nl', array('nid'));
  $query->condition('nl.nid', $values['nid']);
  $locations = $query->execute();

  if ($locations->rowCount()) {
	  db_update('node_location')
		  ->fields(
				  array(
				    'lat' => round($values['lat'], 12),
				    'lon' => round($values['lon'], 12),
				  )
			  )
		  ->condition('nid', $values['nid'])
		  ->execute();
  }
  else {
    db_insert('node_location')
      ->fields(
	        array(
	          'nid' => $values['nid'],
	          'lat' => round($values['lat'], 12),
            'lon' => round($values['lon'], 12),
	        )
        )
      ->execute();
  }
    drupal_set_message(t('The location has been saved.'));
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function geonode_block_info() {
  $blocks['geonode_block'] = array(
    // info: The name of the block.
    'info' => t('Geonode block'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
    'cache' => DRUPAL_NO_CACHE, // default
  );
  return $blocks;
}

  /**
   * Implements hook_block_view().
   *
   * This hook generates the contents of the blocks themselves.
   */
function geonode_block_view($delta = '') {
  switch ($delta) {
    case 'geonode_block':
      $block['subject'] = t('Geonode block');
      $block['content'] = geonode_get_points_block();
      break;
  }
  return $block;
}

function geonode_get_points_block() {
  global $language;
  $types = explode('|', variable_get('geonode_node_types', 'page'));

  $query = db_select('node', 'n');
  $query->innerJoin('node_location', 'nl', 'n.nid = nl.nid');
  $query->fields('n', array('title'))
    ->fields('nl');
  $query->condition('n.type', $types, 'IN')
    ->condition('n.status', 0, '>')
    ->condition('n.language', array(LANGUAGE_NONE, $language->language), 'IN');

  $result = $query->execute();
  $markers = array();

  foreach($result as $obj) {
    $markers[] = array(
      'title' => $obj->title,
      'latitude' => $obj->lat,
      'longitude' => $obj->lon
    );
  }

  $plugin = variable_get('geonode_plugin', '');
  $map = module_invoke("geonode_{$plugin}", 'geonode_plugin', 'render', $markers);
  return $map;
}